import win.ui;
/*DSG{{*/
var winform = win.form(text="ChatGPT 桌面助理";right=757;bottom=467)
winform.add()
/*}}*/

import web.view;
var wb = web.view(winform);

wb.html = /**
<!DOCTYPE html><html>
<head>
	<meta charset="utf-8" />
	<title>WebView2</title> 
	
	<script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
	<script src="https://lib.baomitu.com/react/17.0.2/umd/react.development.js"></script>
	<script src="https://lib.baomitu.com/react-dom/17.0.2/umd/react-dom.development.js"></script>
	<script src="https://lib.baomitu.com/chatui-core/2.4.2/index.min.js"></script> 
	<link rel="stylesheet" href="https://lib.baomitu.com/chatui-core/2.4.2/index.min.css"> 
	<script src="https://lib.baomitu.com/babel-standalone/7.18.13/babel.min.js"></script>
	<style type="text/css">html,body,#app{height:100%}</style>
</head>
<body>  

<script type="text/babel"> 
	const { useState,useEffect,useCallback,useRef } =  React;  
	const { default: Chat, Bubble, useMessages, Image } = ChatUI
	const schema = 'http://'
	const basePath = 'localhost:4000';
	const baseUrl = schema + basePath + '/chat-gpt';
	let sessionMsg = "";
	const App = () => {
		const [msgID, setMsgID] = useState("");
  		const [result, setResult] = useState("");
  		let msg = "";
  		const { messages, appendMsg, setTyping, updateMsg } = useMessages([{
    		type: 'text',
    		content: { text: '主人好，我是 ChatGPT 智能助理，你的贴心小助手~' },
    		user: { avatar: 'https://gitee.com/xiaowu_wang/pic/raw/master/1680245769332.jpg' },
  		}]);
  		
  		useEffect(() => {
    		// 监听result的改变，来实现打字机效果
    		updateMsg(msgID, {
      			type: "text",
      			content: { text: result }
    		});
  		}, [result]);
	
		const socket = new WebSocket('ws://' + basePath);
		// 监听连接打开事件
		socket.addEventListener('open', (event) => {
  			console.log('WebSocket 连接已打开');
		});
		// 监听收到消息事件
		socket.addEventListener('message', (event) => {
  			console.log('收到服务器消息:', event.data);
  			msg += event.data;
        	setResult(msg);
      		// 处理storeMsg，保证上下文
        	sessionMsg += event.data;
		});
		// 监听连接关闭事件
		socket.addEventListener('close', (event) => {
  			console.log('WebSocket 连接已关闭');
		});
		// 获取当前时间戳
  		function nanoid() {
  			return new Date().getTime().toString();
  		}
  		function handleSend(type, val) {
      		// 先设置一个唯一的msgID
      		const msgID = nanoid();
      		setMsgID(msgID);
      		// 重置msg
      		msg = "";
      		// 重置对话框
      		setResult(msg);
    		if (type === 'text' && val.trim()) {
      			appendMsg({
        			type: 'text',
        			content: { text: val },
        			position: 'right',
      			});
			
      			setTyping(true);
      			// 判断是否以图片二字开头，然后以:进行分割取后半部分
    			if (val.startsWith("图片")) {
    			    val = val.substr(3)
    			    // 定义url
					let url = baseUrl + '/imagesGenerations' 
					$.ajax({
  						url: url,
  						type: 'POST',
  						data: {
  							"prompt": val
						},
  						success: function(response) {
    						console.log("请求成功，返回数据为：" + response);
    						appendMsg({
          						type: 'image',
          						content: { picUrl: response.data },
        					})
  						},
  						error: function(xhr, status, error) {
    						console.log("请求失败，错误信息为：" + error);
  						}
					});
    			}else {
      				// 处理storeMsg，保证上下文;
        			sessionMsg += (sessionMsg + "\n你: " + val + "\nAI:");
    				appendMsg({
        				_id: msgID,
          				type: 'text',
          				content: { text: result },
        			})
        			socket.send(sessionMsg);
    			}
    			
    		}
  		}
		
  		function renderMessageContent(msg) {
    		const { type, content } = msg;
		
    		// 根据消息类型来渲染
    		switch (type) {
      		case 'text':
        		return <Bubble content={content.text} />;
      		case 'image':
        		return (
          		<Bubble type="image">
            		<img src={content.picUrl} alt="" />
          		</Bubble>
        		);
      		default:
        		return null;
    		}
  		}
		
  		return (
    		<Chat
      		navbar={{ title: '' }}
      		messages={messages}
      		renderMessageContent={renderMessageContent}
      		onSend={handleSend}
    		/>
  		);
	};
		
	ReactDOM.render(<App />, document.querySelector('#app')); 
</script>
<div id="app"></div>
**/

winform.show();
win.loopMessage();