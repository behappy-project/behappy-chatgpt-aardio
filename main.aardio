import win.ui;
/*DSG{{*/
var winform = win.form(text="ChatGPT 桌面助理";right=757;bottom=467)
winform.add()
/*}}*/

import web.view;
var wb = web.view(winform);

import web.rest.jsonClient;
var http = web.rest.jsonClient(); 
var ai = http.api("http://localhost:3000/chat-gpt/");
 
wb.external = {
	ask = function(content){
		var ret = ai.completions({
  			"content": content,//消息内容
  			"model": "gpt-3.5-turbo",//模型 
		})
 		
		if(ret){
		    return ret.data.content;
		}
	};	
} 

wb.html = /**
<!DOCTYPE html><html>
<head>
	<meta charset="utf-8" />
	<title>WebView2</title> 
	<script src="https://lib.baomitu.com/react/17.0.2/umd/react.development.js"></script>
	<script src="https://lib.baomitu.com/react-dom/17.0.2/umd/react-dom.development.js"></script>
	<script src="https://lib.baomitu.com/chatui-core/2.4.2/index.min.js"></script> 
	<link rel="stylesheet" href="https://lib.baomitu.com/chatui-core/2.4.2/index.min.css"> 
	<script src="https://lib.baomitu.com/babel-standalone/7.18.13/babel.min.js"></script>
	<style type="text/css">html,body,#app{height:100%}</style>
</head>
<body>  

<script type="text/babel"> 
	const { useState,useEffect,useCallback,useRef } =  React;  
	const { default: Chat, Bubble, useMessages } = ChatUI;  
	
	const App = () => {
  		const { messages, appendMsg, setTyping } = useMessages([{
    		type: 'text',
    		content: { text: '主人好，我是 ChatGPT 智能助理，你的贴心小助手~' },
    		user: { avatar: 'https://gitee.com/xiaowu_wang/pic/raw/master/1680245769332.jpg' },
  		}]);
		
  		function handleSend(type, val) {
    		if (type === 'text' && val.trim()) {
      			appendMsg({
        			type: 'text',
        			content: { text: val },
        			position: 'right',
      			});
			
      			setTyping(true);
      			
      			aardio.ask(val).then( text=>{
      				appendMsg({
          				type: 'text',
          				content: { text: text },
        				});	
      			}) 
    		}
  		}
		
  		function renderMessageContent(msg) {
    		const { content } = msg;
    		return <Bubble content={content.text} />;
  		}
		
  		return (
    		<Chat
      		navbar={{ title: '' }}
      		messages={messages}
      		renderMessageContent={renderMessageContent}
      		onSend={handleSend}
    		/>
  		);
		};
		
	ReactDOM.render(<App />, document.querySelector('#app')); 
</script>
<div id="app"></div>
**/

winform.show();
win.loopMessage();